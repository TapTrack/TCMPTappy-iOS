//
//  TappyReaderTests.swift
//  TappyReaderTests
//
//  Created by David Shalaby on 2018-03-08.
//  Copyright Â© 2018 Papyrus Electronics Inc d/b/a TapTrack. All rights reserved.
//
/*
 * Copyright (c) 2018. Papyrus Electronics, Inc d/b/a TapTrack.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * you may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import XCTest
@testable import TapTrackReader

@objc
class TestCommunicator : NSObject, TappySerialCommunicator{
    @objc var state: TappyStatus = TappyStatus.STATUS_CLOSED
    @objc var bytesSent : [UInt8] = []
    @objc var dataListener : ([UInt8]) -> ()
    var statusListener : (TappyStatus) -> ()
    
    @objc override init(){
        bytesSent = []
        dataListener = {_ in func emptyDataListener(data : [UInt8]) -> (){}}
        statusListener = {_ in func emptyStatusListener(status :TappyStatus) -> (){}}//{_ in func emptyStatusListener(status: TappyBleCommunicatorStatus) -> (){}}
    }

    @objc func setDataListener(receivedBytes listener : @escaping ([UInt8]) -> ()){
        dataListener = listener
    }
    @objc func removeDataListener(){
      dataListener = {_ in func emptyDataListener(data : [UInt8]) -> (){}}
    }
    @objc func setStatusListener(statusReceived listener: @escaping (TappyStatus) -> ()) {
        statusListener = listener
    }
    
    @objc func removeStatusListener(){
        statusListener = {_ in func emptyStatusListener(status: TappyStatus) -> (){}}
    }
    @objc func getStatus() -> TappyStatus{
        return TappyStatus.STATUS_READY
    }
    @objc func sendBytes(data : [UInt8]) {
     //   NSLog(format: "TestCommunicator is sending bytes %@", arguments : data)
        NSLog("TestCommunicator is sending bytes %@", data)
        bytesSent.append(contentsOf: data)
        return
    }
    
    func connect() {
        return
    }
    
    func disconnect() {
        return
    }
    
    func close() {
        return
    }
    
    func initialize() {
        return
    }
    @objc
    func getDeviceDescription() -> String{
        return "Non Physical Test Communicator"
    }
    
    
}

@objc class TappyReaderTests: XCTestCase {
    
    @objc override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class
    }
    
    @objc override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    @objc func testMessageComposition() {
        //1. Given
        let testCommunicator : TestCommunicator = TestCommunicator.init()
        let serialTappyUnderTest : SerialTappy = SerialTappy.init(communicator: testCommunicator)
        let message : TCMPMessage = RawTCMPMesssage(commandCode: 0x01, commandFamily: [0x01,0x02], payload: [0x7D,0x7E,0x33])
        let expectedFrame : [UInt8] = [0x7E,0x00,0x08,0xF8,0x01,0x02,0x01,0x7D,0x5D,0x7D,0x5E,0x33,0xE2,0xFE,0x7E]
        //2. When
        serialTappyUnderTest.sendMessage(message: message)
        //3. Then
        XCTAssertEqual(testCommunicator.bytesSent, expectedFrame)
        
    }
    
    @objc func testBasicBufferingAndFrameResolution(){
        var testCommunicator : TestCommunicator = TestCommunicator.init()
        var serialTappyUnderTest : SerialTappy = SerialTappy.init(communicator: testCommunicator)
        var validHDLCFrame : [UInt8] = [0x7E,0x00,0x08,0xF8,0xFA,0x03,0xFE,0x7D,0x5D,0x7D,0x5E,0x33,0xC1,0xEE,0x7E]
        
        func testResponseListener(message : TCMPMessage){
            XCTAssertEqual(message.commandCode, 0xFE)
            XCTAssertEqual(message.commandFamily, [0xFA,0x03])
            XCTAssertEqual(message.payload, [0x7D,0x7E,0x33])
        }
        
        serialTappyUnderTest.setResponseListener(listener: testResponseListener)
        serialTappyUnderTest.receiveBytes(data: validHDLCFrame)
    }
    
    @objc func testLongFrame(){
        var testCommunicator : TestCommunicator = TestCommunicator.init()
        var serialTappyUnderTest : SerialTappy = SerialTappy.init(communicator: testCommunicator)
        var longFrame : [UInt8] = [
            0x7E,0x01,0xC7,0x38,0xFA,0x03,0xFE,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x44,0x44,0x44,0x44,0x44,0x44,0x44,
            0x44,0x3E,0x37,0x7E]
        
        func testResponseListener(message : TCMPMessage){
            XCTAssertEqual(message.commandCode, 0xFE)
            XCTAssertEqual(message.commandFamily, [0xFA,0x03])
            XCTAssertEqual(message.payload.count, 450)
        }
        
        serialTappyUnderTest.setResponseListener(listener: testResponseListener)
        serialTappyUnderTest.receiveBytes(data: longFrame)
        
        
    }
    
    @objc func testPerformanceExample() {
        // This is an example of a performance test case.
        self.measure {
            // Put the code you want to measure the time of here.
        }
    }
    
}
